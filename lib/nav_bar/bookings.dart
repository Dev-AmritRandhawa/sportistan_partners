import 'package:chips_choice/chips_choice.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:delayed_display/delayed_display.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/material.dart';import 'package:intl/intl.dart';import 'package:sportistan_partners/nav_bar/booking_entireday_info.dart';import 'package:sportistan_partners/nav_bar/booking_info.dart';import 'package:sportistan_partners/utils/page_router.dart';class Bookings extends StatefulWidget {  const Bookings({super.key});  @override  State<Bookings> createState() => _BookingsState();}class _BookingsState extends State<Bookings> {  final _server = FirebaseFirestore.instance;  final _auth = FirebaseAuth.instance;  DateTime dateTime = DateTime.now();  int groundIndex = 0;  List<String> dropDownList = [];  List<String> groundID = [];  List<String> groundAddress = [];  ValueNotifier<bool> switchGrounds = ValueNotifier<bool>(false);  ValueNotifier<bool> showFilter = ValueNotifier<bool>(false);  var options = [    "Today",    "Yesterday",    "Tomorrow",    "Past 30 Days",    "Upcoming 30 Days"  ];  var tag = 4;  var options2 = [    "Both",    "Entire Day",    "Single Bookings",  ];  var tag2 = 0;  List<String> options3 = [];  var tag3 = 0;  var filterDuplicate = [];  ValueNotifier<bool> bookingDataListener = ValueNotifier<bool>(false);  Future<void> _futureGroundTypes() async {    try {      await _server          .collection("SportistanPartners")          .where("userID", isEqualTo: _auth.currentUser!.uid)          .get()          .then((value) => {                for (int i = 0; i < value.size; i++)                  {                    dropDownList.add(value.docs[i]["groundName"]),                    groundID.add(value.docs[i]["groundID"]),                    groundAddress.add(                      value.docs[i]["locationName"],                    ),                  },                options3 = dropDownList              })          .then((value) => {                switchGrounds.value = true,              });    } catch (e) {      if (mounted) {        ScaffoldMessenger.of(context)            .showSnackBar(const SnackBar(content: Text("No Ground Found")));      }    }  }  @override  void dispose() {    super.dispose();  }  @override  void initState() {    _futureGroundTypes();    streamOfBookings();    super.initState();  }  List<BookingsData> bookingData = [];  List<dynamic> allSlotsRef = [];  @override  Widget build(BuildContext context) {    return Scaffold(        body: ValueListenableBuilder(      valueListenable: switchGrounds,      builder: (context, value, child) => SafeArea(        child: value            ? SingleChildScrollView(                physics: const BouncingScrollPhysics(),                child: Column(                  children: [                    Row(                      mainAxisAlignment: MainAxisAlignment.center,                      children: [                        const Padding(                          padding: EdgeInsets.all(8.0),                          child:                              Icon(Icons.calendar_today, color: Colors.black),                        ),                        Padding(                          padding: const EdgeInsets.all(8.0),                          child: Text("Bookings",                              style: TextStyle(                                color: Colors.black,                                fontWeight: FontWeight.bold,                                fontFamily: "DMSans",                                fontSize:                                    MediaQuery.of(context).size.height / 25,                              ) //TextStyle                              ),                        ),                      ],                    ),                    ContentNew(                      child: ChipsChoice<int>.single(                        value: tag3,                        onChanged: (val) {                          setState(() {                            tag3 = val;                            streamOfBookings();                          });                        },                        choiceItems: C2Choice.listFrom<int, String>(                          source: options3,                          value: (i, v) => i,                          label: (i, v) => v,                          tooltip: (i, v) => v,                        ),                        choiceStyle: C2ChipStyle.toned(                          borderRadius: const BorderRadius.all(                            Radius.circular(5),                          ),                        ),                        wrapped: true,                      ),                    ),                    ValueListenableBuilder(                      valueListenable: showFilter,                      builder: (context, value, child) => value                          ? DelayedDisplay(                              child: Column(                                children: [                                  ContentNew(                                    child: ChipsChoice<int>.single(                                      value: tag,                                      onChanged: (val) {                                        setState(() {                                          tag = val;                                          streamOfBookings();                                        });                                      },                                      choiceItems:                                          C2Choice.listFrom<int, String>(                                        source: options,                                        value: (i, v) => i,                                        label: (i, v) => v,                                        tooltip: (i, v) => v,                                      ),                                      choiceStyle: C2ChipStyle.toned(                                        borderRadius: const BorderRadius.all(                                          Radius.circular(5),                                        ),                                      ),                                      wrapped: true,                                    ),                                  ),                                  ContentNew(                                    child: ChipsChoice<int>.single(                                      value: tag2,                                      onChanged: (val) {                                        setState(() {                                          tag2 = val;                                          streamOfBookings();                                        });                                      },                                      choiceItems:                                          C2Choice.listFrom<int, String>(                                        source: options2,                                        value: (i, v) => i,                                        label: (i, v) => v,                                        tooltip: (i, v) => v,                                      ),                                      choiceStyle: C2ChipStyle.toned(                                        borderRadius: const BorderRadius.all(                                          Radius.circular(5),                                        ),                                      ),                                      wrapped: true,                                    ),                                  ),                                  Card(                                    color: Colors.red.shade400,                                    child: Row(                                        mainAxisAlignment:                                            MainAxisAlignment.spaceBetween,                                        children: [                                          const Text("   Close Filter Tray",                                              style: TextStyle(                                                  color: Colors.white)),                                          IconButton(                                              onPressed: () {                                                showFilter.value = false;                                              },                                              icon: const Icon(                                                Icons.clear,                                                color: Colors.white,                                              )),                                        ]),                                  )                                ],                              ),                            )                          : Row(                              mainAxisAlignment: MainAxisAlignment.spaceBetween,                              children: [                                  const Padding(                                    padding: EdgeInsets.only(left: 15.0),                                    child: Text(                                      "Filter",                                      style: TextStyle(                                          fontFamily: "DMSans", fontSize: 18),                                    ),                                  ),                                  Padding(                                    padding: const EdgeInsets.only(right: 15),                                    child: CircleAvatar(                                      child: IconButton(                                          onPressed: () {                                            showFilter.value = true;                                          },                                          icon: const Icon(                                              Icons.filter_alt_outlined)),                                    ),                                  )                                ]),                    ),                    const Divider(),                    ValueListenableBuilder(                      valueListenable: bookingDataListener,                      builder: (context, value, child) {                        return value                            ? ListView.builder(                                physics: const BouncingScrollPhysics(),                                shrinkWrap: true,                                itemCount: bookingData.length,                                itemBuilder: (context, index) {                                  int bookingIndex = index + 1;                                  return Padding(                                    padding: const EdgeInsets.all(8.0),                                    child: InkWell(                                      onTap: bookingData[index]                                              .isBookingCancelled                                          ? null                                          : () {                                              checkBookingType(                                                  entireDayBooked:                                                      bookingData[index]                                                          .entireDayBooking,                                                  bookingID: bookingData[index]                                                      .bookingID);                                            },                                      child: Card(                                        color: Colors.grey.shade50,                                        child: Column(                                          children: [                                            CircleAvatar(                                                backgroundColor:                                                    bookingData[index]                                                            .isBookingCancelled                                                        ? Colors.red                                                        : Colors.green,                                                child: Text(                                                  bookingIndex.toString(),                                                  style: const TextStyle(                                                      color: Colors.white),                                                )),                                            const Text(                                              "Booked by",                                              style: TextStyle(                                                  fontFamily: "DMSans",                                                  color: Colors.black45),                                            ),                                            Text(                                              bookingData[index].bookingPerson,                                              style: const TextStyle(                                                  fontSize: 18,                                                  color: Colors.black87,                                                  fontFamily: "DMSans",                                                  fontWeight: FontWeight.bold),                                            ),                                            bookingData[index].entireDayBooking                                                ? Card(                                                    color: Colors.indigo,                                                    child: Padding(                                                      padding:                                                          const EdgeInsets.all(                                                              8.0),                                                      child: Text(                                                          "Entire Day Booked - ${DateFormat.yMMMMEEEEd().format(DateTime.parse(bookingData[index].group))}",                                                          style:                                                              const TextStyle(                                                                  color: Colors                                                                      .white)),                                                    ))                                                : Container(),                                            bookingData[index]                                                    .isBookingCancelled                                                ? const Text(                                                    "Cancelled",                                                    style: TextStyle(                                                        fontSize: 18,                                                        color: Colors.red,                                                        fontFamily: "DMSans",                                                        fontWeight:                                                            FontWeight.bold),                                                  )                                                : Container(),                                            Row(                                              mainAxisAlignment:                                                  MainAxisAlignment.center,                                              children: [                                                const Text("Booked at : "),                                                Text(                                                    DateFormat.yMMMMEEEEd()                                                        .format(                                                            bookingData[index]                                                                .bookedDate)                                                        .toString(),                                                    style: const TextStyle(                                                        fontSize: 18,                                                        fontWeight:                                                            FontWeight.bold)),                                              ],                                            ),                                            const Row(                                              children: [                                                Text("   Booking Details",                                                    style: TextStyle(                                                        fontFamily: "DMSans")),                                              ],                                            ),                                            bookingData[index].entireDayBooking                                                ? Container()                                                : ListTile(                                                    title: Text(                                                        bookingData[index]                                                            .slotTime,                                                        style: const TextStyle(                                                            fontSize: 20)),                                                    subtitle: Text(DateFormat                                                            .yMMMMEEEEd()                                                        .format(DateTime.parse(                                                            bookingData[index]                                                                .group))),                                                    trailing: const Icon(Icons                                                        .arrow_forward_ios),                                                  ),                                            bookingData[index].entireDayBooking                                                ? Container()                                                : Row(                                                    children: [                                                      Padding(                                                        padding:                                                            const EdgeInsets                                                                .all(8.0),                                                        child: Text(                                                            '(${bookingData[index].slotStatus})',                                                            style: TextStyle(                                                                fontSize: 15,                                                                fontWeight:                                                                    FontWeight                                                                        .bold,                                                                color: setStatusColor(                                                                    bookingData[                                                                            index]                                                                        .slotStatus),                                                                fontFamily:                                                                    "DMSans")),                                                      ),                                                      Padding(                                                        padding:                                                            const EdgeInsets                                                                .all(8.0),                                                        child: bookingData[                                                                        index]                                                                    .feesDue ==                                                                0                                                            ? const Text(                                                                "Paid",                                                                style: TextStyle(                                                                    color: Colors                                                                        .green),                                                              )                                                            : Row(                                                                children: [                                                                  Text(                                                                    "Due Amount : Rs.",                                                                    style:                                                                        TextStyle(                                                                      color: Colors                                                                          .red                                                                          .shade200,                                                                    ),                                                                  ),                                                                  Text(                                                                      bookingData[                                                                              index]                                                                          .feesDue                                                                          .toString(),                                                                      style: TextStyle(                                                                          color: Colors                                                                              .red                                                                              .shade200,                                                                          fontSize:                                                                              15,                                                                          fontFamily:                                                                              "DMSans")),                                                                ],                                                              ),                                                      ),                                                    ],                                                  ),                                            bookingData[index].entireDayBooking                                                ? SizedBox(                                                    width: double.infinity,                                                    height:                                                        MediaQuery.of(context)                                                                .size                                                                .height /                                                            15,                                                    child: ListView.builder(                                                      scrollDirection:                                                          Axis.horizontal,                                                      shrinkWrap: true,                                                      itemCount:                                                      bookingData[index].allSlotsRef.length,                                                      itemBuilder:                                                          (context, count) {                                                        return Padding(                                                          padding:                                                              const EdgeInsets                                                                  .all(8.0),                                                          child: OutlinedButton(                                                              onPressed: null,                                                              child: Text(                                                                  bookingData[index].allSlotsRef[count]                                                                      .toString())),                                                        );                                                      },                                                    ),                                                  )                                                : Container(),                                          ],                                        ),                                      ),                                    ),                                  );                                })                            : const Center(                                child: Column(                                  mainAxisAlignment: MainAxisAlignment.center,                                  children: [                                    CircularProgressIndicator(),                                  ],                                ),                              );                      },                    )                  ],                ),              )            : const Column(                mainAxisAlignment: MainAxisAlignment.center,                children: [                    Center(                        child: CircularProgressIndicator(                      strokeWidth: 1,                    ))                  ]),      ),    ));  }  Color setStatusColor(String result) {    switch (result) {      case "Booked":        {          return Colors.green;        }      case "Half Booked":        {          return Colors.orangeAccent;        }      case "Fees Due":        {          return Colors.red.shade200;        }    }    return Colors.white;  }  void checkBookingType(      {required bool entireDayBooked, required String bookingID}) {    if (entireDayBooked) {      PageRouter.push(          context,          BookingEntireDayInfo(            bookingID: bookingID,          ));    } else {      PageRouter.push(          context,          BookingInfo(            bookingID: bookingID,          ));    }  }  createFilter(int val) {    DateTime now = DateTime.now();    switch (val) {      case 0:        {          return DateTime(now.year, now.month, now.day);        }      case 1:        {          return DateTime(now.year, now.month, now.day)              .subtract(const Duration(days: 1));        }      case 2:        {          return DateTime(now.year, now.month, now.day)              .add(const Duration(days: 1));        }      case 3:        {          return DateTime(now.year, now.month, now.day)              .subtract(const Duration(days: 30));        }      case 4:        {          return DateTime(now.year, now.month, now.day)              .add(const Duration(days: 30));        }    }  }  createFilterForBookingType(int val) {    switch (val) {      case 0:        {          return [true, false];        }      case 1:        {          return [true];        }      case 2:        {          return [false];        }    }  }  streamOfBookings() {    tag == 3 || tag == 4        ? _server            .collection("GroundBookings")            .where("bookingCreated", isLessThan: createFilter(tag))            .where('entireDayBooking',                whereIn: createFilterForBookingType(tag2))            .get()            .then((value) => {collection(value)})        : _server            .collection("GroundBookings")            .where("bookingCreated", isEqualTo: createFilter(tag))            .where('entireDayBooking',                whereIn: createFilterForBookingType(tag2))            .get()            .then((value) => {collection(value)});  }  collection(QuerySnapshot<Map<String, dynamic>> value) {    bookingDataListener.value = false;    bookingData.clear();    filterDuplicate.clear();    allSlotsRef.clear();    for (int i = 0; i < value.docChanges.length; i++) {      DateTime dt =          (value.docChanges[i].doc.get('bookedAt') as Timestamp).toDate();      if (value.docChanges[i].doc.get('entireDayBooking')) {        if (!filterDuplicate.contains(value.docChanges[i].doc.get('groupID'))) {          filterDuplicate.add(value.docChanges[i].doc.get('groupID'));          bookingData.add(BookingsData(              isBookingCancelled:                  value.docChanges[i].doc.get('isBookingCancelled'),              entireDayBooking: value.docChanges[i].doc.get('entireDayBooking'),              bookingID: value.docChanges[i].doc.get('bookingID'),              slotTime: value.docChanges[i].doc.get('slotTime'),              bookingPerson: value.docChanges[i].doc.get('bookingPerson'),              bookedDate: dt,              group: value.docChanges[i].doc.get('group'),              feesDue: value.docChanges[i].doc.get('feesDue'),              allSlotsRef: value.docChanges[i].doc.get('includeSlots'),              slotStatus: value.docChanges[i].doc.get('slotStatus')));        }      } else {        bookingData.add(BookingsData(            isBookingCancelled:                value.docChanges[i].doc.get('isBookingCancelled'),            entireDayBooking: value.docChanges[i].doc.get('entireDayBooking'),            bookingID: value.docChanges[i].doc.get('bookingID'),            slotTime: value.docChanges[i].doc.get('slotTime'),            bookingPerson: value.docChanges[i].doc.get('bookingPerson'),            bookedDate: dt,            group: value.docChanges[i].doc.get('group'),            feesDue: value.docChanges[i].doc.get('feesDue'),            allSlotsRef: [],            slotStatus: value.docChanges[i].doc.get('slotStatus')));      }    }    bookingDataListener.value = true;  }}class ContentNew extends StatefulWidget {  const ContentNew({super.key, required this.child});  final Widget child;  @override  State<ContentNew> createState() => _ContentNewState();}class _ContentNewState extends State<ContentNew> {  @override  Widget build(BuildContext context) {    return SizedBox(      width: double.infinity,      child: Card(        elevation: 2,        child: Column(          crossAxisAlignment: CrossAxisAlignment.center,          mainAxisSize: MainAxisSize.min,          children: [            Flexible(fit: FlexFit.loose, child: widget.child),          ],        ),      ),    );  }}class BookingsData {  final bool isBookingCancelled;  final bool entireDayBooking;  final String bookingID;  final String slotTime;  final String bookingPerson;  final String slotStatus;  final DateTime bookedDate;  final String group;  final num feesDue;  final List<dynamic> allSlotsRef;  BookingsData(      {required this.isBookingCancelled,      required this.entireDayBooking,      required this.bookingID,      required this.slotTime,      required this.slotStatus,      required this.bookingPerson,      required this.bookedDate,      required this.group,      required this.feesDue,      required this.allSlotsRef});}